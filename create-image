#!/bin/bash

# Setup script error handling see https://disconnected.systems/blog/another-bash-strict-mode for details
set -xuo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'

# Ensure we are root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

# Some useful constants
image="$(basename $TRAVIS_REPO_SLUG).img"
mount="mnt"
script="setup"
rpi_date="2019-07-12"
rpi_deb_version="buster"
rpi_img_date="2019-07-10"
rpi_zip="${rpi_img_date}-raspbian-${rpi_deb_version}-lite.zip"
rpi_url="https://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-${rpi_date}/${rpi_zip}"


# Unmount drives and general cleanup on exit, the trap ensures this will always
# run execpt in the most extream cases.
cleanup() {
    [[ -f "${mount}/tmp/${script}" ]] && rm "${mount}/tmp/${script}"
    if [[ -d "${mount}" ]]; then
        umount "${mount}/dev/pts" || true
        umount "${mount}/dev" || true
        umount "${mount}/proc" || true
        umount "${mount}/sys" || true
        umount "${mount}/boot" || true
        umount "${mount}" || true
        rmdir "${mount}" || true
    fi
    [ -n "${loopdev:-}" ] && losetup --detach "${loopdev}" || true
}
trap cleanup EXIT

rm -rf "${rpi_zip}.sha1" && wget "${rpi_url}.sha1"

if ! shasum -c "${rpi_zip}.sha1"
then
    rm -rf ${rpi_zip}
    wget "${rpi_url}"
    shasum -c "${rpi_zip}.sha1"
fi

# Clean the existing image files
(ls *.img >> /dev/null 2>&1 && rm *.img) || echo "no .img files to remove"

# Unzip Raspbian
# -u  update files, create if necessary
unzip -u "${rpi_zip}"

mv "$(ls *.img | head -n 1)" "${image}"

# Add 1G to the image size
dd if=/dev/zero bs=1M count=1024 >> "${image}"

# Configure loopback device to expand partition 2
loopdev=$(losetup --find --show "${image}")
echo "Created loopback device ${loopdev}"

parted --script "${loopdev}" print
parted --script "${loopdev}" resizepart 2 100%
parted --script "${loopdev}" print
e2fsck -f "${loopdev}p2"
resize2fs "${loopdev}p2"

# Clean up loopback device
#losetup -d "${loopdev}"

echo "Finished resizing disk image."

bootdev=$(ls "${loopdev}"*1)
rootdev=$(ls "${loopdev}"*2)
partprobe "${loopdev}"

# Mount the image
[ ! -d "${mount}" ] && mkdir "${mount}"
mount "${rootdev}" "${mount}"
[ ! -d "${mount}/boot" ] && mkdir "${mount}/boot"
mount "${bootdev}" "${mount}/boot"

# Copy our installation script and other artifacts
install -Dm755 "${script}" "${mount}/tmp/${script}"

# Prep the chroot
mount --bind /proc "${mount}/proc"
mount --bind /sys "${mount}/sys"
mount --bind /dev "${mount}/dev"
mount --bind /dev/pts "${mount}/dev/pts"

cp /etc/resolv.conf "${mount}/etc/resolv.conf"
cp /usr/bin/qemu-arm-static "${mount}/usr/bin"
cp "${mount}/etc/ld.so.preload" "${mount}/etc/_ld.so.preload"
echo "" > "${mount}/etc/ld.so.preload"

# Run the installation script as if we would be inside the Raspberry Pi
chroot "${mount}" "/tmp/${script}"

# Put back the old ld.so.preload script.
mv "${mount}/etc/_ld.so.preload" "${mount}/etc/ld.so.preload"
